import express from "express";
import User from "../models/User.js";
import bcrypt from "bcrypt";
import nodemailer from "nodemailer";
import crypto from "crypto";
import dotenv from "dotenv";
dotenv.config();

const router = express.Router();

// C·∫•u h√¨nh nodemailer ƒë·ªÉ g·ª≠i email
const transporter = nodemailer.createTransport({
  service: "Gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    console.log("üëâ Nh·∫≠n d·ªØ li·ªáu ƒëƒÉng k√Ω:", { name, email });
    if (!name || !email || !password) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    const userExist = await User.findOne({ email });
    if (userExist) {
      console.log("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i:", email);
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    const hashed = await bcrypt.hash(password, 10);
    const verificationCode = Math.floor(
      100000 + Math.random() * 900000
    ).toString();

    console.log("‚úÖ M√£ x√°c nh·∫≠n ƒë∆∞·ª£c t·∫°o:", verificationCode);

    const newUser = await User.create({
      name,
      email,
      password: hashed,
      verificationCode,
      isVerified: false,
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "M√£ x√°c nh·∫≠n t√†i kho·∫£n c·ªßa b·∫°n",
      html: `
        <h2>X√°c nh·∫≠n t√†i kho·∫£n</h2>
        <p>Xin ch√†o ${name},</p>
        <p>M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†:</p>
        <h3 style="color: #ec4899;">${verificationCode}</h3>
        <p>Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n. M√£ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.</p>
        <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
      `,
    };

    console.log("üìß ƒêang g·ª≠i email ƒë·∫øn:", email);
    console.log("üîê Email user:", process.env.EMAIL_USER);

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("‚ùå L·ªói g·ª≠i email:", error);
      } else {
        console.log("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i:", info.response);
      }
    });

    res.status(201).json({
      message:
        "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n.",
      user: {
        name: newUser.name,
        email: newUser.email,
        isVerified: newUser.isVerified,
      },
    });
  } catch (err) {
    console.error("üî• L·ªói trong endpoint /register:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// X√°c minh m√£
router.post("/verify-code", async (req, res) => {
  try {
    const { email, code } = req.body;
    console.log("üì• Nh·∫≠n verify:", { email, code });
    const user = await User.findOne({ email, verificationCode: code });
    if (!user) {
      return res.status(400).json({ message: "M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá" });
    }

    user.isVerified = true;
    user.verificationCode = undefined;
    await user.save();

    res.status(200).json({
      message: "X√°c nh·∫≠n t√†i kho·∫£n th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.",
    });
  } catch (err) {
    res.status(500).json({ message: "X√°c nh·∫≠n th·∫•t b·∫°i", error: err.message });
  }
});

// ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user)
      return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    if (!user.isVerified) {
      return res.status(403).json({
        message:
          "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c minh. Vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n t·ª´ email.",
      });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        isVerified: user.isVerified,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// Qu√™n m·∫≠t kh·∫©u
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email" });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y" });
    }

    // T·∫°o m·∫≠t kh·∫©u m·ªõi ng·∫´u nhi√™n
    const newPassword = Math.random().toString(36).slice(-8); // M·∫≠t kh·∫©u m·ªõi c√≥ ƒë·ªô d√†i 8 k√Ω t·ª±

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi cho ng∆∞·ªùi d√πng
    user.password = newPassword;
    await user.save();

    // G·ª≠i email ch·ª©a m·∫≠t kh·∫©u m·ªõi
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n",
      html: `
        <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p>Ch√†o ${user.name},</p>
        <p>M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†:</p>
        <h3 style="color: #3b82f6;">${newPassword}</h3>
        <p>Vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n.</p>
      `,
    };
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("‚ùå L·ªói g·ª≠i email reset:", error);
      } else {
        console.log("‚úÖ Email g·ª≠i m·∫≠t kh·∫©u m·ªõi th√†nh c√¥ng:", info.response);
      }
    });

    res.status(200).json({ message: "ƒê√£ g·ª≠i m·∫≠t kh·∫©u m·ªõi qua email" });
  } catch (err) {
    console.error("üî• L·ªói forgot-password:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});
// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
router.put("/:id", async (req, res) => {
  const { name, email } = req.body;

  try {
    const user = await User.findById(req.params.id);
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    user.name = name || user.name;
    user.email = email || user.email;
    user.updatedAt = new Date();

    await user.save();
    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
});

// C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
router.post("/:id/change-password", async (req, res) => {
  const { id } = req.params;
  const { oldPassword, newPassword } = req.body;

  if (!oldPassword || !newPassword) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("üî• L·ªói change-password:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

export default router;
